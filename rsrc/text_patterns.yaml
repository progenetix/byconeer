---
line_cleanup:
  description: >-
    The cleanup patterns are match => replace regex patterns to remove
    "empirically determined" lint from the input files, where this may
    interfere with later regexing.
  cleanup:
    - m: '!Sample_characteristics_ch'
      s: "channel "
    - m: '(?i)grade[^\w]+?not applicable'
      s: ""
    - m: '(?i)stage[^\w]+?not applicable'
      s: ""
    - m: '(?i)grade[^\w]+?grade'
      s: "grade:"
    - m: 't-status[^\:]+?: '
      s: 'T'

extraction_scopes:
  description: >-
    Detection and processing of clinical scopes goes through several stages:
    1. line cleanup - so far run for the input before processing the individual
    scopes
    2. line match using sme general pattern expected in all lines containing
    data for the current scope (`filter` pattern)
    3. finding and extracting the relevant data by looping over a list of
    specific patterns with memorized matches (`find`)
    4. post-processing using empirical cleanp replacements (`cleanup`)
    5. checking the correct structure (`final_check` - a global pattern can be
    used if other post-processing is performed)

  survival_status:
    filter: '(?i).*?(?:(?:dea(?:d|th))|alive|surviv|outcome|status)'
    preclean:
      - m: '(?i)days to death or last seen alive[^\w]+?\d+?(?:[^\w\.]|$)'
        s: ''
      - m: '[^\w]+?NA(?:[^\w\.]|$)'
        s: ' '
      - m: 'remission status past double induction .cr. complete remission. RD. refractory disease. ED. early death[^\w]+?ED'
        s: 'survival: dead'      
      - m: 'remission status past double induction .cr. complete remission. RD. refractory disease. ED. early death[^\w]+?NA'
        s: ''
      - m: 'remission status past double induction .cr. complete remission. RD. refractory disease. ED. early death[^\w]+?CR'
        s: 'survival: alive'      
      - m: 'remission status past double induction .cr. complete remission. RD. refractory disease. ED. early death[^\w]+?RD'
        s: '' # alive but not responding to therapy so removed?      
      - m: 'Event Free Survival[^\w]+?no event'
        s: 'recurrence: no'
      - m: 'Event Free Survival.event'
        s: 'recurrence: yes'
      - m: 'Outcome[^\w]+?no event'
        s: 'survival: alive'
      - m: 'Outcome[^\w]+?event'
        s: 'survival: dead'
      - m: 'survival status[^\w]+?0'
        s: 'survival: dead'
      - m: 'survival status[^\w]+?1'
        s: 'survival: alive'
      - m: 'overall[^\w]+?survival[^\w]+?days[^\w]+?NA'
        s: ''
      - m: 'survival(?: time|from diagnosis)?[^\w]+?(days|months|years?)[^\w]+?(\d\d?\d?\d?\.?\d?\d?)'
        s: 'survival: \2\1'
      - m: 'survival[^\w]+?months[^\w]+?(\d\d?\d?\.?\d?\d?)'
        s: 'survival: \1months'
      - m: 'dead or alive at the end of follow.?up'
        s: 'survival'
      - m: 'survival after surgery[^\w]+?(\d\d?\d?\d?\.?\d?\d?)'
        s: 'survival: \1months'
      - m: 'survival after surgery: not applicable'
        s: ''
      - m: 'alive.?dead at the end of recorded survival'
        s: 'survival'
      - m: 'patient survival probability[^\w]+?'
        s: ''
      - m: 'perioperative death[^\w]+?(?:FALSE|NA)'
        s: ''
      - m: 'dead of disease[^\w]+?NO'
        s: 'survival: alive'      
      - m: 'dead of disease[^\w]+?YES'
        s: 'survival: dead'
      - m: 'days_to_death[^\w]+?\d+?(?:[^\w\.]|$)'
        s: 'survival: dead'
      - m: 'progression-free survival[^\w]+?\d\d?\d?months'
        s: ''
      - m: 'status os \(0=alive, 1=dead\)[^\w]+?1'
        s: 'survival: dead'
      - m: 'status os \(0=alive, 1=dead\)[^\w]+?0'
        s: 'survival: alive'
      - m: 'status os \(0=alive, 1=dead\)[^\w]+?NA'
        s: ''
      - m: 'status [re]f?s \(0=no event, 1=event\)[^\w]+?NA'
        s: ''
      - m: 'survival[^\w]+?\d+?\w+?(?:[^\w\.]|$)'
        s: ''
    find:
      - '(?i).*?((?:survival|outcome)(?: status)?[^\w]+?\w+?)(?:[^\w\.]|$)'
      - '(?i).*?vital status[^\w]+?(\w+?)(?:[^\w]|$)'
      - '(?i).*?(alive[^\w]+?\w+?)(?:[^\w]|$)'
      - '(?i).*?(dea(?:d|th)[^\w]+?\w+?)(?:[^\w]|$)'
    cleanup:
      - m: '[\s]'
        s: ''
      - m: '(?:survival[^\d]+?)null'
        s: ''
      - m: 'unknown'
        s: ''
      - m: '^NA$'
        s: ''
      - m: '(?i)(?:survival|outcome)[^\w]+?(dead|alive)'
        s: '\1'
      - m: '(?i)dea(?:d|th)[^\w]+?1'
        s: 'dead'
      - m: '(?i)dea(?:d|th)[^\w]+?0'
        s: 'alive'
      - m: '(?i)alive'
        s: 'alive'
      - m: '(?i)dea(?:d|th)'
        s: 'dead'
      - m: '(?i)dea(?:d|th)[^\w]+?TRUE'
        s: 'dead'
      - m: '(?i)deceased'
        s: 'dead'
      - m: '(?i)deador'
        s: ''
    final_check: '.+?'


  pathological_stage:
    filter: '(?i).*?stage'
    find:
      - '(?i).*?stage[^\w]+?(Dukes.? \w)(?:[^\w]|$)'
      - '(?i).*?stage[^\w]+?(Binet \w)(?:[^\w]|$)'
      - '(?i).*?stage[^\w]+?([i12340]\w*?)(?:[^\w]|$)'
    cleanup:
      - m: '(?i)IV'
        s: '4'
      - m: '(?i)III'
        s: '3'
      - m: '(?i)II'
        s: '2'
      - m: '(?i)I'
        s: '1'
      - m: '(?i)S'
        s: 's'
    final_check: '.+?'


  tumor_grade:
    filter: '(?i).*?grade'
    find:
      - '(?i).*?(Gleason grade \d)(:?[^\w]|$)'
      - '(?i).*?[^\-]grade[^\w]+?(\w+?)(:?[^\w]|$)'
      - '(?i).*?grade[^\w]+?((?:(?:well)|(?:moderately)|(?:poorly)) differentiated)(:?[^\w]|$)'
    cleanup:
      - m: '4'
        s: 'IV'
      - m: '3'
        s: 'III'
      - m: '2'
        s: 'II'
      - m: '1'
        s: 'I'
      - m: 'G'
        s: ''
    final_check: '.+?'

  pathological_tnm_findings:
    filter: '(?i).*?[^\w][pc]?(T[\dx](?:[^\d].*?$|$))|(N[\dx+](?:[^\d].*?$|$))|(M[\dx+](?:[^\d].*?$|$))'
    find:
      - '(?i)^.*?(([pc]?T[\dx][abc]?)[,;]? ?([pc]?N[\dx+][abc]?)?[,;]? ?([pc]?M[\dx+][abc]?)?)(:?[^\w]|$)'
    cleanup:
      - m: '[,; ]'
        s: ''
      - m: 't'
        s: 'T'
      - m: 'n'
        s: 'N'
      - m: 'm'
        s: 'M'
      - m: '(?i)o'
        s: '0'     
      - m: '(?i)A'
        s: 'a'
      - m: '(?i)B'
        s: 'b'
      - m: '(?i)C'
        s: 'c'
      - m: '(?i)P'
        s: 'p'
      - m: '(?i)X'
        s: 'x'
      - m: '[+]'
        s: '1'
    final_check: '([pc]T[\dx][abcd]?)?([pc]N[\dx][abcd]?)?([pc]M[\dx][abcd]?)?'

